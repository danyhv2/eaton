/**
 *
 *
 *
 * - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY -
 * - Generated by Gulp (gulp-babel).
 *
 *
 *
 *
 */


//-----------------------------------
// Component : Search
//-----------------------------------
'use strict';

var App = window.App || {};

App.search = function (autosize) {

  // Variable Declarations
  var componentClass = '.eaton-search';
  var $componentElement = $(componentClass);
  var $searchInputEl = $componentElement.find('.eaton-search--default__form-input');

  // Check AEM Author Mode
  var isAEMAuthorMode = App.global.utils.isAEMAuthorMode();

  /**
  * Init
  */
  var init = function init() {
    // If not in AEM Author Mode & component exists on page - initialize scripts
    if (!isAEMAuthorMode) {
      addEventListeners();

      // Intercept Carriage Return on TextArea and submit form.
      $searchInputEl.keydown(function (e) {
        var evt = e || window.event; // compliant with ie6
        var keyCode = evt.keyCode || evt.which;
        var inputVal = e.target.value; // Targets the active input
        var $activeSearchComponent = $(e.currentTarget).closest(componentClass);
        var regex = new RegExp('^[a-zA-Z0-9]+$');

        // Remove new lines on the 'active' text area if no character exists
        e.target.value = inputVal.replace(/^\s*(\n)\s*$/, '');

        // Allow submit only if the textarea has atleast one alphanumeric character on carriage return
        if (keyCode === 13 && e.target.value.length >= 1 && regex.test(e.target.value)) {
          $activeSearchComponent.find('form').submit();
          return false;
        }
      });
    }
  };

  /**
  * Create Template - Markup for each predictive search result item
  */
  var linkTemplate = function linkTemplate(data, term) {

    var regX = new RegExp('(' + term + ')', 'ig');
    var linkTitleText = data.title;

    // Search the title for the matched term and wrap it in required markup
    linkTitleText = linkTitleText.replace(regX, '<strong>$1</strong>');

    return '\n      <li class="eaton-search--default__result-item b-body-copy">\n        <a href="' + data.link + '" target="' + data.target + '"> ' + linkTitleText + ' </a>\n      </li>';
  };

  /**
  * Handle Input Behaviors
  */
  var handleInputBehavior = function handleInputBehavior(event) {

    // Check if the #of characters in the inputBox exceeds characterLimit - 3
    var $activeSearchComponent = $(event.currentTarget).closest(componentClass);
    var inputVal = event.target.value;

    if (event.target.value.length >= 3) {
      // Request Search Results - AJAX
      getSearchResults(event, inputVal);
    } else {
      // Empty the contents of the result-list
      $activeSearchComponent.find('.eaton-search--default__results').removeClass('active');
      $activeSearchComponent.find('.eaton-search--default__result-list').html('');
    }
  };

  /**
  * Load Predictive Search Results - AJAX
  */
  var getSearchResults = function getSearchResults(event, term) {

    // Get the closest search component to avoid conflicts when multiple search elements on page
    var $activeSearchComponent = $(event.currentTarget).closest(componentClass);
    var searchResultsURL = $activeSearchComponent.attr('data-predictive-search');
    var requestOptions = {
      searchTerm: term,
      format: 'json'
    };

    var resultList = '';
    var ajaxReq = '';

    // If URL path is configured
    if (!searchResultsURL) {
      return;
    }

    // Requests Static JSON file. To be replaced by service URL in final implementation
    ajaxReq = $.getJSON(searchResultsURL, requestOptions);

    ajaxReq
    // Callback for Successful Request
    .done(function (data) {

      // Loop over all result items
      $.each(data.results, function (index, item) {
        resultList += linkTemplate(item, term);
      });

      // Replace the contents of the list with the AJAX results
      $activeSearchComponent.find('.eaton-search--default__result-list').html(resultList);
      $activeSearchComponent.find('.eaton-search--default__results').addClass('active');
    })

    // Callback for Failed Request
    .fail(function (data) {
      console.error('error', data);
    });
  };

  /**
   * Bind All Event Listeners
   */
  var addEventListeners = function addEventListeners() {
    $searchInputEl.on('keyup', handleInputBehavior);
  };

  /**
  * If containing DOM element is found, Initialize and Expose public methods
  */
  if ($componentElement.length > 0) {
    autosize($('.search-box textarea'));
    autosize($('.eaton-header textarea'));
    init();
  }
}(window.autosize);