'use strict';
/**
* TASK: Create Image Sprite
*/

const spritesmith = require('gulp.spritesmith');
const path = require('path');
const merge = require('merge-stream');
const header = require('gulp-header');

// File Banner/Header config
//--------------
const bannerData = {
  buildDate: new Date().toGMTString()
};

const bannerMessage = ['//-----------------------------------',
  '//\n//\n//\n//\n//',
  '// - THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY - \n//',
  '// - Generated by Gulp (gulp.spritesmith).',
  '// - @build: <%= data.buildDate %>',
  '//\n//\n//\n//\n//',
  '//-----------------------------------\n',
  '// stylelint-disable\n\n'
].join('\n');


const buildImageSprite = function(gulp, CONFIG) {
  return function() {

    const spriteData = gulp.src('./src-assets/flag-sprite-icons/*.png')
      .pipe(spritesmith({
        imgName: 'flags-sprite.png',
        cssName: '_eaton-flags-sprite.scss',
        imgPath: 'images/flags-sprite.png'
      }));

    // Pipe image stream to be generated in clientLibs folder
    const imgStream = spriteData.img
      .pipe(gulp.dest(path.join(CONFIG.paths.destAEM.clientlibStatic, 'global/css/images')));

    // Pipe CSS stream to be generated in clientLibs folder
    const cssStream = spriteData.css
      .pipe(header(bannerMessage, { data: bannerData } ))
      .pipe(gulp.dest(path.join(CONFIG.paths.srcRoot, '/global/css/base/')));

    // Return a merged stream to handle both `end` events
    return merge(imgStream, cssStream);

  };
};

module.exports = buildImageSprite;
