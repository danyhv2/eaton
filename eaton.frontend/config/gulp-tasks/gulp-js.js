'use strict';
/*
* Gulp Task: Transform Javascript Files
*/

const babel = require('gulp-babel');
const plumber = require('gulp-plumber');
const filenamelist = require('gulp-filenamelist');
const gutil = require('gulp-util');

const filenamelistOptions = {
  outputFileName: 'js.txt',
  prepend: '## THIS IS AN AUTOGENERATED FILE BY GULP. DO NOT EDIT THIS FILE DIRECTLY.\n',
  separator: '\n'
};

const babelOptions = {

  // NOTE: gulp-babel -> Build Error: Couldn't find preset "es2015" relative to directory #93
  // FIX -> Use NPM package names. More Info: https://github.com/babel/gulp-babel/issues/93#issuecomment-249172581
  presets: [
    'babel-preset-es2015'
  ].map(require.resolve)

};


const buildJS = function(gulp, CONFIG, bundle) {
  return function() {

    let srcFolders;
    let destAEM;

    // Config: GLOBAL-JavaScript
    //--------------
    if (bundle === 'global') {
      srcFolders = [
        CONFIG.paths.src.global + '/**/*.js'
      ];

      destAEM = CONFIG.paths.destAEM.global;
    }


    // Config: COMPONENTS-Javascript
    //--------------
    if (bundle === 'components') {
      srcFolders = [
        CONFIG.paths.src.components.content + '/**/js/*.js',
        CONFIG.paths.src.components.structure + '/**/js/*.js',

        // NOTE: Ignore OLD JS Files inside 'clientlibs' folders
        '!' + CONFIG.paths.src.components.content + '/**/clientlib/js/*.js',
        '!' + CONFIG.paths.src.components.structure + '/**/clientlib/js/*.js'
      ];

      destAEM = CONFIG.paths.destAEM.components;
    }


    // Build JS
    //--------------
    const stream = gulp.src(srcFolders)
      .pipe(plumber())
      .pipe(babel(babelOptions))
      .on('error', (err) => {
        gutil.log(
          gutil.colors.red.bold('[Javascript Build Error]'),
          err.message
        );
      })
      .pipe(gulp.dest(destAEM));


    stream.on('end', () => {
      // Write Manifest File (js.txt) for AEM
      gulp.src(destAEM + '/**/*.js')
        .pipe(filenamelist(filenamelistOptions))
        .pipe(gulp.dest(destAEM));
    });

  };
};


module.exports = buildJS;
